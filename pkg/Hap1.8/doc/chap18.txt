  
  [1m[4m[31m18. Parallel Computation[0m
  
      | [22m[32mChildClose(s)[0m This closes the stream s to a child GAP process.                                                                                                                                                                                           | 
      | [22m[32mChildCommand("cmd;",s)[0m This runs any GAP command "cmd;" on child process accessed by the stream s. No output from "cmd;" can be accessed via the stream.                                                                                                 | 
      | [22m[32mChildFunction("function(arg);",s)[0m This runs the GAP function "function(arg);" on a child process accessed by the stream s. The output from "func;" can be accessed via the stream.                                                                       | 
      | [22m[32mChildProcess()[0m [22m[32mChildProcess("workspace")[0m This starts a GAP session as a child process and returns a stream to the child process. The child GAP session can be started with any given workspace.                                                          | 
      | [22m[32mChildRead(s)[0m This returns, as a string, the output of the last application of ChildFunction("function(arg);",s).                                                                                                                                         | 
      | [22m[32mChildReadEval(s)[0m This returns, as an evaluated string, the output of the last application of ChildFunction("function(arg);",s).                                                                                                                          | 
      | [22m[32m NextAvailableChild(L)[0m Inputs a list L of child processes and returns a child in L which is ready for computation (as soon as such a child is available).                                                                                                | 
      | [22m[32mParallelList(I,fn,L)[0m Inputs a list I, a function fn such that fn(x) is defined for all x in I, and a list of children L. It uses the children in L to compute List(I,x->fn(x)). (Obviously the function fn must be defined on all child processes in L.) | 
  
