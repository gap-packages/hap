<Chapter><Heading> Simplicial groups</Heading>


<Table Align="|l|" >

<Row>
<Item>
<Index>NerveOfCatOneGroup</Index>
<C>NerveOfCatOneGroup(G,n)</C>


<P/>
Inputs a cat-1-group <M>G</M> and a positive integer <M>n</M>. It returns the
low-dimensional part of the  nerve of  <M>G</M> as a simplicial group of length <M>n</M>.
 
<Br/>
<Br/>
This function applies both to cat-1-groups  for which IsHapCatOneGroup(G) is true, and to  cat-1-groups produced using the Xmod package.   
<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>EilenbergMacLaneSimplicialGroup</Index>
<C>EilenbergMacLaneSimplicialGroup(G,n,dim)</C>


<P/>
Inputs a group <M>G</M>, a positive integer <M>n</M>, and a positive integer <M>dim </M>.  
 The function returns  the first <M>1+dim</M> terms of a
 simplicial group with <M>n-1</M>st homotopy group equal to <M>G</M> and all other homotopy groups equal to zero.

<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>EilenbergMacLaneSimplicialGroupMap</Index>
<C>EilenbergMacLaneSimplicialGroupMap(f,n,dim)</C>


<P/>
Inputs a group homomorphism <M>f:G\rightarrow Q</M>, a positive integer <M>n</M>, and a positive integer <M>dim </M>.
 The function returns  the first <M>1+dim</M> terms of a
 simplicial group homomorphism <M>f:K(G,n) \rightarrow K(Q,n)</M> of Eilenberg-MacLane simplicial groups.

<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>MooreComplex</Index>
<C>MooreComplex(G)</C>


<P/>
Inputs a simplicial group <M>G</M> and  returns its Moore complex as a <M>G</M>-complex.  


<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>ChainComplexOfSimplicialGroup</Index>
<C>ChainComplexOfSimplicialGroup(G)</C>


<P/>
Inputs a simplicial group <M>G</M> and returns  the cellular chain complex <M>C</M> of a CW-space <M>X</M> represented by the homotopy type of the simplicial group. 
Thus the homology groups of <M>C</M> are the integral homology groups of <M>X</M>. 


<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>SimplicialGroupMap</Index>
<C>SimplicialGroupMap(f)</C>


<P/>
Inputs a  homomorphism <M>f:G\rightarrow Q</M> of simplicial groups.
 The function returns  an induced  map
  <M>f:C(G) \rightarrow C(Q)</M> of chain complexes whose homology is the integral homology of the simplicial group G and Q respectively.

<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>


<Row>
<Item>
<Index>HomotopyGroup</Index>
<C>HomotopyGroup(G,n)</C>


<P/>
Inputs a simplicial group <M>G</M> and a positive integer <M>n</M>. The integer <M>n</M> must be less than  the length of <M>G</M>. It
 returns, as a group, the (n)-th homology group of its Moore complex. Thus HomotopyGroup(G,0) returns the "fundamental group" of <M>G</M>. 

</Item>
</Row>


<Row>
<Item>
<Index>Bar Resolution</Index>
<C>Representation of elements in the bar resolution</C>


<P/>
For a group G we denote by <M>B_n(G)</M> the free <M>\mathbb ZG</M>-module with basis the lists <M>[g_1 | g_2 | ... | g_n]</M> where the <M>g_i</M> range over <M>G</M>. 

<Br/>
<Br/>
We represent a word

<Br/>
<Br/>

<M>w = h_1.[g_{11} | g_{12} | ... | g_{1n}] - h_2.[g_{21} | g_{22} | ... | g_{2n}] + ... + h_k.[g_{k1} | g_{k2} | ... | g_{kn}] </M>

<Br/>
<Br/>

in <M>B_n(G)</M> as a list of lists:

<Br/>
<Br/>
<M> [ [+1,h_1,g_{11} , g_{12} , ... , g_{1n}] , [-1, h_2,g_{21} , g_{22} , ... | g_{2n}] + ... + [+1, h_k,g_{k1} , g_{k2} , ... , g_{kn}] </M>.

</Item>
</Row>

<Row>
<Item>
<Index>BarResolutionBoundary</Index>
<C>BarResolutionBoundary(w)</C>


<P/>
This function inputs a word <M>w</M> in the bar resolution module
 <M>B_n(G)</M>
and returns its image under the boundary homomorphism <M>d_n\colon B_n(G) \rightarrow B_{n-1}(G)</M> in the bar resolution.

<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>


<Row>
<Item>
<Index>BarResolutionHomotopy</Index>
<C>BarResolutionHomotopy(w)</C>


<P/>
This function inputs a word <M>w</M> in the bar resolution module
 <M>B_n(G)</M>
and returns its image under the contracting homotopy
 <M>h_n\colon B_n(G) \rightarrow B_{n+1}(G)</M> in the bar resolution.

<Br/>
<Br/>
This function is currently being implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>Bar Complex</Index>
<C>Representation of elements in the bar complex</C>


<P/>
For a group G we denote by <M>BC_n(G)</M> the free abelian group   with basis the lists <M>[g_1 | g_2 | ... | g_n]</M> where the <M>g_i</M> range over <M>G</M>.

<Br/>
<Br/>
We represent a word

<Br/>
<Br/>

<M>w = [g_{11} | g_{12} | ... | g_{1n}] - [g_{21} | g_{22} | ... | g_{2n}] + ... + [g_{k1} | g_{k2} | ... | g_{kn}] </M>

<Br/>
<Br/>

in <M>BC_n(G)</M> as a list of lists:

<Br/>
<Br/>
<M> [ [+1,g_{11} , g_{12} , ... , g_{1n}] , [-1, g_{21} , g_{22} , ... | g_{2n}] + ... + [+1, g_{k1} , g_{k2} , ... , g_{kn}] </M>.

</Item>
</Row>

<Row>
<Item>
<Index>BarComplexBoundary</Index>
<C>BarComplexBoundary(w)</C>


<P/>
This function inputs a word <M>w</M> in the n-th term of the bar complex   
 <M>BC_n(G)</M>
and returns its image under the boundary homomorphism <M>d_n\colon BC_n(G) \rightarrow BC_{n-1}(G)</M> in the bar complex.

<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>BarResolutionEquivalence</Index>
<C>BarResolutionEquivalence(R)</C>


<P/>
This function inputs a free <M>ZG</M>-resolution <M>R</M>. It
returns a component object HE with components

<List> 
<Item>  HE!.phi(n,w) is a function which inputs a non-negative integer <M>n</M> and a word <M>w</M> in <M>B_n(G)</M>. It returns the image of <M>w</M>
in <M>R_n</M> under a chain equivalence  <M>\phi\colon B_n(G) \rightarrow R_n</M>.</Item>
<Item>  HE!.psi(n,w)  is a function which inputs a non-negative integer <M>n</M> and a word <M>w</M> in <M>R_n</M>. It returns the image of <M>w</M> in <M>B_n(G)</M> under a chain equivalence  <M>\psi\colon R_n \rightarrow B_n(G)</M>.</Item>
<Item>  HE!.equiv(n,w) is a function which inputs a non-negative integer <M>n</M> and a word <M>w</M> in <M>B_n(G)</M>. It returns the image of <M>w</M>
 in <M>B_{n+1}(G)</M> under a <M>ZG</M>-equivariant homomorphism 
<Br/>
<Br/>
<M>equiv(n,-) \colon B_n(G) \rightarrow B_{n+1}(G)</M> 
<Br/>
<Br/>
satisfying  


<Display>w - \psi ( \phi (w)) =   d(n+1, equiv(n,w)) + equiv(n-1,d(n,w)) .
</Display>

where <M>d(n,-)\colon B_n(G) \rightarrow B_{n-1}(G)</M> is the boundary homomorphism in the bar resolution.
</Item>
</List>

This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>BarComplexEquivalence</Index>
<C>BarComplexEquivalence(R)</C>


<P/>
This function inputs a free <M>ZG</M>-resolution <M>R</M>. It first constructs the chain complex
 <M>T=TensorWithIntegerts(R)</M>. The function  
returns a component object HE with components

<List>
<Item>  HE!.phi(n,w) is a function which inputs a non-negative integer <M>n</M> and a word <M>w</M> in <M>BC_n(G)</M>. It returns the image of <M>w</M>
in <M>T_n</M> under a chain equivalence  <M>\phi\colon BC_n(G) \rightarrow T_n</M>.</Item>
<Item>  HE!.psi(n,w)  is a function which inputs a non-negative integer <M>n</M> and an element
  <M>w</M> in <M>T_n</M>. It returns the image of <M>w</M> in <M>BC_n(G)</M> under a chain equivalence  <M>\psi\colon T_n \rightarrow BC_n(G)</M>.</Item>
<Item>  HE!.equiv(n,w) is a function which inputs a non-negative integer <M>n</M> and a word  <M>w</M> in <M>BC_n(G)</M>. It returns the image of <M>w</M>
 in <M>BC_{n+1}(G)</M> under a  homomorphism
<Br/>
<Br/>
<M>equiv(n,-) \colon BC_n(G) \rightarrow BC_{n+1}(G)</M>
<Br/>
<Br/>
satisfying


<Display>w - \psi ( \phi (w)) =   d(n+1, equiv(n,w)) + equiv(n-1,d(n,w)) .
</Display>

where <M>d(n,-)\colon BC_n(G) \rightarrow BC_{n-1}(G)</M> is the boundary homomorphism in the bar complex.
</Item>
</List>

This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>

<Row>
<Item>
<Index>Bar Cocomplex</Index>
<C>Representation of elements in the bar cocomplex</C>


<P/>
For a group G we denote by <M>BC^n(G)</M> the free abelian group   with basis the lists <M>[g_1 | g_2 | ... | g_n]</M> where the <M>g_i</M> range over <M>G</M>.

<Br/>
<Br/>
We represent a word

<Br/>
<Br/>

<M>w = [g_{11} | g_{12} | ... | g_{1n}] - [g_{21} | g_{22} | ... | g_{2n}] + ... + [g_{k1} | g_{k2} | ... | g_{kn}] </M>

<Br/>
<Br/>

in <M>BC^n(G)</M> as a list of lists:

<Br/>
<Br/>
<M> [ [+1,g_{11} , g_{12} , ... , g_{1n}] , [-1, g_{21} , g_{22} , ... | g_{2n}] + ... + [+1, g_{k1} , g_{k2} , ... , g_{kn}] </M>.

</Item>
</Row>

<Row>
<Item>
<Index>BarCocomplexCoboundary</Index>
<C>BarCocomplexCoboundary(w)</C>


<P/>
This function inputs a word <M>w</M> in the n-th term of the bar cocomplex
 <M>BC^n(G)</M>
and returns its image under the coboundary homomorphism <M>d^n\colon BC^n(G) \rightarrow BC^{n+1}(G)</M> in the bar cocomplex.
<Br/>
<Br/>
This function was implemented by <B>Van Luyen Le</B>.
</Item>
</Row>



</Table>
</Chapter>


