#(C) Graham Ellis, 2005-2006

#####################################################################
#####################################################################
#####################################################################
InstallGlobalFunction(ModularHomology,
function(X,n)
local  
	ModularHomology_Obj;


#####################################################################
#####################################################################
ModularHomology_Obj:=function(C,n)
local
	M1, M2, 
	dim, 
	rankM1, rankM2, 
	Dimension, Boundary,
	i;

if n <0 then return false; fi;
if n=0 then return [0]; fi;

Dimension:=C.dimension;
Boundary:=C.boundary;
M1:=[];
M2:=[];

for i in [1..Dimension(n)] do
M1[i]:=Boundary(n,i);
od;
M1:=TransposedMat(M1);
rankM1:=RankMat(M1);

M1:=0;
for i in [1..Dimension(n+1)] do
M2[i]:=Boundary(n+1,i);
od;
M2:=TransposedMat(M2);
rankM2:=RankMat(M2);

return Dimension(n) - rankM1 -rankM2;
end;
#####################################################################
#####################################################################


#####################################################################
#####################################################################












#####################################################################
#####################################################################

if EvaluateProperty(X,"type")="chainComplex" then
return ModularHomology_Obj(X,n); fi;

end);
#####################################################################
#####################################################################
#####################################################################
