<Chapter><Heading>Cubical Complexes</Heading>

<Table Align="|l|" >

<Row>
<Item>
<Index>ArrayToPureCubicalComplex</Index>
<C> ArrayToPureCubicalComplexA,n)</C>

<P/>
Inputs an integer array <M>A</M> of dimension <M>d</M> 
and an integer <M>n</M>.
It returns a d-dimensional pure cubical complex corresponding to the
 black/white "image" determined by the threshold <M>n</M> and the values of the entries in <M>A</M>. (Integers below the threshold correspond to a black pixel, and higher integers  correspond to a white pixel.)
 </Item>
 </Row>

<Row>
<Item>
<Index>PureCubicalComplex</Index>
<C>PureCubicalComplexA,n)</C>

<P/>
Inputs a binary array <M>A</M> of dimension <M>d</M>.
It returns the corresponding d-dimensional pure cubical complex. 
 </Item>
 </Row>

<Row>
<Item>
<Index>PureCubicalComplexIntersection</Index>
<C>PureCubicalComplexIntersection(S,T)</C>

<P/>
Inputs two pure cubical complexes with common dimension and array size. It returns the intersection of the two complexes. (An entry in the binary array of the intersection  has value 1 if and only if the corresponding entries in the binary arrays of S and T both have value 1.)
 </Item>
 </Row>

<Row>
<Item>
<Index>PureCubicalComplexUnion</Index>
<C>PureCubicalComplexUnion(S,T)</C>

<P/>
Inputs two pure cubical complexes with common dimension and array size. It returns the union of the two complexes. (An entry in the binary array of the union  has value 1 if and only if at least one of the corresponding entries in the binary arrays of S and T  has value 1.)

 </Item>
 </Row>


<Row>
<Item>
<Index>PureCubicalComplexDifference</Index>
<C>PureCubicalComplexDifference(S,T)</C>

<P/>
Inputs two pure cubical complexes with common dimension and array size. It returns the difference S-T. (An entry in the binary array of the  difference
has value 1 if and only if  the corresponding entry in the binary array of S is 1 and the corresponding entry in the binary array of T is 0.)

 </Item>
 </Row>

 
<Row>
<Item>
<Index>ReadImageAsPureCubicalComplex</Index>
<C> ReadImageAsPureCubicalComplex("file.png",n)</C>


<P/>
Reads an image file ("file.png", "file.eps", "file.bmp" etc)  
and an integer <M>n</M>  
between 0 and 765. 
It returns a 2-dimensional pure cubical complex based on the
 black/white version of the image determined by the threshold <M>n</M>. 
</Item>
</Row>

<Row>
<Item>
<Index>ReadImageSequenceAsPureCubicalComplex</Index>
<C> ReadImageSequenceAsPureCubicalComplex("directory",n)</C>


<P/>
Reads the name of a directory containing a sequence of image files (ordered alphanumerically), and
 an integer <M>n</M>
between 0 and 765.
It returns a 3-dimensional pure cubical complex based on the
 black/white version of the images determined by the threshold <M>n</M>.
</Item>
</Row>



<Row>
<Item>
<C> Size(T)</C>

<P/>
This returns the number of non-zero entries in the binary array of the pure cubical complex T.

 </Item>
 </Row>


<Row>
<Item>
<Index>WritePureCubicalComplexAsImage</Index>
<C> WritePureCubicalComplexAsImage(T,"filename","ext")</C>


<P/>
Inputs a 2-dimensional pure cubical complex T, and a filename followed by its extension 
(e.g. "myfile" followed by "png"). A black/white image is saved to the file.

</Item>
</Row>

<Row>
<Item>
<Index>ViewPureCubicalComplex</Index>
<C> ViewPureCubicalComplex(T)</C>
<C> ViewPureCubicalComplex(T,"mozilla")</C>


<P/>
Inputs a 2-dimensional pure cubical complex T, and optionally a command such as "mozilla" for viewing image files.
A black/white image is displayed. 
</Item>
</Row>

<Row>
<Item>
<Index>Homology</Index>
<C> Homology(T,n)</C>
<C> Homology(T)</C>

<P/>
Inputs a pure cubical complex, or cubical complex, or simplicial complex <M>T</M> 
and a non-negative integer <M>n</M>. It returns the n-th integral homology of <M>T</M> as a list of torsion integers. 
 If no value of <M>n</M> is input then the list of all homologies of <M>T</M>
in dimensions 0 to Dimension(T)  is returned .
</Item>
</Row>

<Row>
<Item>
<Index>Bettinumbers</Index>
<C> Bettinumbers(T,n)</C>
<C> Bettinumbers(T)</C>

<P/>
Inputs a pure cubical complex, or cubical complex,  simplicial complex or chain complex <M>T</M> and a non-negative integer <M>n</M>.
 The   rank of the  n-th rational homology group  <M>H_n(T,\mathbb Q)</M> is returned. If no value for n is input then the list of Betti numbers
in dimensions 0 to Dimension(T)  is returned .
</Item>
</Row>

<Row>
<Item>
<Index>DirectProductOfPureCubicalComplexes</Index>
<C>DirectProductOfPureCubicalComplexes(M,N)</C>

<P/>
Inputs two cubical complexes <M>M,N</M> and returns their direct product <M>D</M> as a cubical complex. The dimension of <M>D</M> is the sum of the dimensions of <M>M</M> and <M>N</M>.
</Item>
</Row>


<Row>
<Item>
<C>EulerCharacteristic(T)</C>

<P/>
Inputs a  pure cubical complex, or cubical complex, or simplicial complex
 <M>T</M>
and returns its Euler characteristic.
</Item>
</Row>

<Row>
<Item>
<Index>PathComponentOfPureCubicalComplex</Index>
<C> PathComponentOfPureCubicalComplex(T,n)</C>

<P/>
Inputs a pure cubical complex <M>T</M>
and an integer <M>n</M> in the rane 1, ..., Bettinumbers(T)[1] . It returns the n-th path component of
 <M>T</M> as a pure cubical complex. The value <M>n=0</M> is also allowed, in which case the number of path components is returned.
</Item>
</Row>

<Row>
<Item>

<C>ChainComplex(T)</C>

<P/>
Inputs a  pure cubical complex, or cubical complex, or simplicial complex
 <M>T</M>
and returns the (often very large) cellular chain complex of <M>T</M>. 
</Item>
</Row>

<Row>
<Item>
<C>ChainComplexOfPair(T,S)</C>


<P/>
Inputs a  pure cubical complex or cubical complex  <M>T</M> and contractible subcomplex <M>S</M>.
It returns the quotient <M>C(T)/C(S)</M> of cellular chain complexes.
</Item>
</Row>

<Row>
<Item>
<Index>ChainInclusionOfPureCubicalPair</Index>
<C>ChainInclusionOfPureCubicalPair(S,T)</C>


<P/>
Inputs a  pure cubical complex  <M>T</M> and  subcomplex <M>S</M>.
It returns the chain inclusion <M>C(S) \rightarrow C(T)</M> of cellular chain complexes.
</Item>
</Row>

<Row>
<Item>
<Index>ChainMapOfPureCubicalPairs</Index>
<C>ChainMapOfPureCubicalPairs(M,S,N,T)</C>


<P/>
Inputs a  pure cubical complex  <M>N</M> and  subcomplexes <M>M</M>, <M>T</M>
and <M>S</M> in <M>T</M>.
It returns the chain map <M>C(M/S) \rightarrow C(N/T)</M> of quotient cellular chain complexes.
</Item>
</Row>


<Row>
<Item>
<Index>ContractPureCubicalComplex</Index>
<C> ContractPureCubicalComplex(T)</C>


<P/>
Inputs a  pure cubical complex <M>T</M> of dimension <M>d</M> and removes <M>d</M>-dimensional cells from <M>T</M>
without changing the  homotopy type of <M>T</M>. 
When the function has been applied, no further <M>d</M>-cells can be removed 
from <M>T</M> without changing its homotopy type. This function modifies <M>T</M>. 

</Item>
</Row>

<Row>
<Item>
<Index>ContractedComplex</Index>
<C> ContractedComplex(T)</C>


<P/>
Inputs a  pure cubical complex <M>T</M> and returns a structural copy of the complex obtained from <M>T</M> by applying the function ContractPureCubicalComplex(T).

</Item>
</Row>


<Row>
<Item>
<Index>ContractibleSubomplexOfPureCubicalComplex</Index>
<C> ContractibleSubomplexOfPureCubicalComplex(T)</C>

<P/>
Inputs a  pure cubical complex <M>T</M>  and 
returns a maximal contractible subcomplex.
</Item>
</Row>

<Row>
<Item>
<Index>AlmostContractibleSubomplexOfPureCubicalComplex</Index>
<C> AlmostContractibleSubomplexOfPureCubicalComplex(T)</C>

<P/>
Inputs a  pure cubical complex <M>T</M>  and
returns a (not necessarily connected) subcomplex having trivial homology in all degrees greater than <M>0</M>.
</Item>
</Row>

<Row>
<Item>
<Index>HomotopyEquivalentMaximalPureCubicalSubcomplex</Index>
<C> HomotopyEquivalentMaximalPureCubicalSubcomplex(T,S)</C>

<P/>
Inputs a  pure cubical complex <M>T</M> together with  a subcomplex <M>S</M>.
It returns a  subcomplex <M>H</M> of <M>T</M> which contains <M>S</M> and  is maximal with respect to the property that it is homotopy equivalent to <M>S</M>.
</Item>
</Row>

<Row>
<Item>
<Index>HomotopyEquivalentMinimalPureCubicalSubcomplex</Index>
<C> HomotopyEquivalentMinimalPureCubicalSubcomplex(T,S)</C>

<P/>
Inputs a  pure cubical complex <M>T</M> together with  a subcomplex <M>S</M>.
It returns a  subcomplex <M>H</M> of <M>T</M> which contains <M>S</M> and  is minimal with respect to the property that it is homotopy equivalent to <M>T</M>.
</Item>
</Row>


<Row>
<Item>
<Index>BoundaryOfPureCubicalComplex</Index>
<C> BoundaryOfPureCubicalComplex(T)</C>

<P/>
Inputs a  pure cubical complex <M>T</M> and  returns its boundary as a 
pure cubical complex. The boundary consists of all cubes which have one or more facets that lie in just the one cube. 

</Item>
</Row>

<Row>
<Item>
<Index>SingularitiesOfPureCubicalComplex</Index>
<C>SingularitiesOfPureCubicalComplex(T,radius,tolerance)</C>


<P/>
Inputs a  pure cubical complex <M>T</M> together with a positive integer "radius" and an integer "tolerance" in the range 1..100.
It returns the subcomplex of those points in the boundary where the boundary
is not differentiable. (The method for deciding differentiability at a point is crude/discrete, prone to errors and depends on the radius and tolerance.)  
 </Item>
 </Row>

<Row>
<Item>
<Index>ThickenedPureCubicalComplex</Index>
<C> ThickenedPureCubicalComplex(T)</C>


<P/>
Inputs a  pure cubical complex <M>T</M> 
 and returns a pure cubical complex  <M>S</M>. If a euclidean cube is
 in <M>T</M> then this cube and all its  neighbouring cubes  
 are included in <M>S</M>.

</Item>
</Row>

<Row>
<Item>
<Index>ComplementOfPureCubicalComplex</Index>
<C> ComplementOfPureCubicalComplex(T)</C>


<P/>
Inputs a  pure cubical complex <M>T</M>
 and returns a pure cubical complex <M>S</M>. A euclidean cube is in <M>S</M>  precisely when  the cube is not in <M>T</M>.

 </Item>
 </Row>

</Table>
</Chapter>


