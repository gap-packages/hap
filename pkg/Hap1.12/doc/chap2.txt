  
  [1X2 [33X[0;0Y[22XZG[122X[101X[1X-Resolutions and Group Cohomology[133X[101X
  
  [33X[0;0YResolutions[133X
  
      â”‚ EquivariantChainMap(R,S,f):: FreeResolution, FreeResolution, GroupHomomorphisms --> EquiChainMap [33X[0;6YInputs a free [22XZG[122X-resolution [22XR[122X of [22XZ[122X, a free [22XZQ[122X-resolution [22XS[122X of [22XZ[122X, and a group homomorphism [22Xf: G â†’ Q[122X. It returns the induced [22Xf[122X-equivariant chain map [22XF: R â†’ S[122X.â”‚ 
      â”‚ FreeGResolution(P,n):: NonFreeResolution, Int --> FreeResolution [33X[0;6YInputs a non-free $\mathbb ZG$-resolution $P_\ast$ and a positive integer [22Xn[122X. It attempts to return [22Xn[122X terms of a free [22XZG[122X-resolution of [22XZ[122X. However, the stabilizer groups in the non-free resolution must be such that HAP can construct free resolutions with contracting homotopies for them.[133X [33X[0;6YThe contracting homotopy on the resolution was implemented by Bui Anh Tuan.[133X                                                                                                                                                                                                                                                                                                                                                                                        â”‚ 
      â”‚ ResolutionBieberbachGroup(G):: MatrixGroup --> FreeResolution ResolutionBieberbachGroup(G,v):: MatrixGroup, List --> FreeResolution [33X[0;6YInputs a torsion free crystallographic group [22XG[122X, also known as a Bieberbach group, represented using [12XAffineCrystGroupOnRight[112X as in the GAP package Cryst. It also optionally inputs a choice of vector [22Xv[122X in the Euclidean space [22XR^n[122X on which [22XG[122X acts freely. The function returns [22Xn+1[122X terms of the free ZG-resolution of [22XZ[122X arising as the cellular chain complex of the tessellation of [22XR^n[122X by the Dirichlet-Voronoi fundamental domain determined by [22Xv[122X. No contracting homotopy is returned with the resolution.[133X [33X[0;6YThis function is part of the HAPcryst package written by Marc Roeder and thus requires the HAPcryst package to be loaded.[133X [33X[0;6YThe function requires the use of Polymake software.[133X â”‚ 
      â”‚ ResolutionCubicalCrustGroup(G,k):: MatrixGroup, Int --> FreeResolution [33X[0;6YInputs a crystallographic group [22XG[122X represented using [12XAffineCrystGroupOnRight[112X as in the GAP package [22XCryst[122X together with an integer [22Xk ge 1[122X. The function tries to find a cubical fundamental domain in the Euclidean space [22XR^n[122X on which [22XG[122X acts. If it succeeds it uses this domain to return [22Xk+1[122X terms of a free ZG-resolution of [22XZ[122X.[133X [33X[0;6YThis function was written by Bui Anh Tuan.[133X                                                                                                                                                                                                                                                                                                                                                                               â”‚ 
      â”‚ ResolutionFiniteGroup(G,k):: Group, Int --> FreeResolution [33X[0;6YInputs a finite group [22XG[122X and an integer [22Xk ge 1[122X. It returns [22Xk+1[122X terms of a free ZG-resolution of [22XZ[122X.â”‚ 
      â”‚ ResolutionNilpotentGroup(G,k):: Group, Int --> FreeResolution [33X[0;6YInputs a nilpotent group [22XG[122X (which can be infinite) and an integer [22Xk ge 1[122X. It returns [22Xk+1[122X terms of a free [22XZG[122X-resolution of [22XZ[122X.â”‚ 
      â”‚ ResolutionNormalSeries(L,k):: List, Int --> FreeResolution [33X[0;6YInputs a a list [22XL[122X consisting of a chain $[22X1=N_1 le N_2 le â‹¯ le N_n =G[122X of normal subgroups of [22XG[122X, together with an integer [22Xk ge 1[122X. It returns [22Xk+1[122X terms of a free ZG-resolution of [22XZ[122X.â”‚ 
      â”‚ ResolutionPrimePowerGroup(G,k):: Group, Int --> FreeResolution [33X[0;6YInputs a finite [22Xp[122X-group [22XG[122X and an integer [22Xk ge 1[122X. It returns [22Xk+1[122X terms of a minimal free [22XFG[122X-resolution of the field [22XF[122X of [22Xp[122X elements.â”‚ 
      â”‚ ResolutionSL2Z(m,k):: Int, Int --> FreeResolution [33X[0;6YInputs positive integers [22Xm, n[122X and returns [22Xn[122X terms of a free [22XZG[122X-resolution of [22XZ[122X for the group [22XG=SL_2( Z[1/m])[122X.[133X [33X[0;6YThis function is joint work with Bui Anh Tuan.[133X                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    â”‚ 
      â”‚ ResolutionSmallGroup(G,k):: Group, Int --> FreeResolution ResolutionSmallGroup(G,k):: FpGroup, Int --> FreeResolution [33X[0;6YInputs a small group [22XG[122X and an integer [22Xk ge 1[122X. It returns [22Xk+1[122X terms of a free ZG-resolution of [22XZ[122X.[133X [33X[0;6YIf [22XG[122X is a finitely presented group then up to degree $2$ the resolution coincides with cellular chain complex of the universal cover of the [22X2[122X complex associated to the presentation of [22XG[122X. Thus the boundaries of the generators in degree [22X3[122X provide a generating set for the module of identities of the presentation.[133X [33X[0;6YThis function was written by Irina Kholodna.[133X                                                                                                                                                                                                                                       â”‚ 
      â”‚ ResolutionSubgroup(R,H):: FreeResolution, Group --> FreeResolution [33X[0;6YInputs a free ZG-resolution of [22XZ[122X and a finite index subgroup [22XH le G[122X. It returns a free ZH-resolution of [22XZ[122X.â”‚ 
  
  [33X[0;0YAlgebras [22XâŸ¶[122X (Co)chain Complexes[133X
  
      â”‚ LeibnizComplex(g,n):: LeibnizAlgebra, Int --> ChainComplex [33X[0;6YInputs a Leibniz algebra, or Lie algebra, [22Xmathfrakg[122X over a ring [22XK[122X together with an integer [22Xnge 0[122X. It returns the first [22Xn[122X terms of the Leibniz chain complex over [22XK[122X. The complex was implemented by Pablo Fernandez Ascariz.[133X â”‚ 
  
  [33X[0;0YResolutions [22XâŸ¶[122X (Co)chain Complexes[133X
  
      â”‚ HomToIntegers(C):: ChainComplex --> CochainComplex HomToIntegers(R):: FreeResolution --> CochainComplex HomToIntegers(F):: EquiChainMap --> CochainMap [33X[0;6YInputs a chain complex [22XC[122X of free abelian groups and returns the cochain complex [22XHom_ Z(C, Z)[122X.[133X [33X[0;6YInputs a free [22XZG[122X-resolution [22XR[122X in characteristic [22X0[122X and returns the cochain complex [22XHom_ ZG(R, Z)[122X.[133X [33X[0;6YInputs an equivariant chain map [22XF: Râ†’ S[122X of resolutions and returns the induced cochain map [22XHom_ ZG(S, Z) âŸ¶ Hom_ ZG(R, Z)[122X.[133X                                                                                                                                                   â”‚ 
      â”‚ HomToIntegralModule(R,A):: FreeResolution, GroupHomomorphism --> CochainComplex [33X[0;6YInputs a free [22XZG[122X-resolution [22XR[122X in characteristic [22X0[122X and a group homomorphism [22XA: G â†’ GL_n( Z)[122X. The homomorphism [22XA[122X can be viewed as the [22XZG[122X-module with underlying abelian group [22XZ^n[122X on which [22XG[122X acts via the homomorphism [22XA[122X. It returns the cochain complex [22XHom_ ZG(R,A)[122X.[133X                                                                                                                                                                                                                                                                              â”‚ 
      â”‚ TensorWithIntegers(R):: FreeResolution --> ChainComplex TensorWithIntegers(F):: EquiChainMap --> ChainMap [33X[0;6YInputs a free [22XZG[122X-resolution [22XR[122X of characteristic [22X0[122X and returns the chain complex [22XR âŠ—_ ZG Z[122X.[133X [33X[0;6YInputs an equivariant chain map [22XF: R â†’ S[122X in characteristic [22X0[122X and returns the induced chain map [22XFâŠ—_ ZG Z : R âŠ—_ ZG Z âŸ¶ S âŠ—_ ZG Z[122X.[133X                                                                                                                                                                                                                                                                                             â”‚ 
      â”‚ TensorWithIntegersModP(C,p):: ChainComplex, Int --> ChainComplex TensorWithIntegersModP(R,p):: FreeResolution, Int --> ChainComplex TensorWithIntegersModP(F,p):: EquiChainMap, Int --> ChainMap [33X[0;6YInputs a chain complex [22XC[122X of characteristic [22X0[122X and a prime integer [22Xp[122X. It returns the chain complex [22XC âŠ—_ Z Z_p[122X of characteristic [22Xp[122X.[133X [33X[0;6YInputs a free [22XZG[122X-resolution [22XR[122X of characteristic [22X0[122X and a prime integer [22Xp[122X. It returns the chain complex [22XR âŠ—_ ZG Z_p[122X of characteristic [22Xp[122X.[133X [33X[0;6YInputs an equivariant chain map [22XF: R â†’ S[122X in characteristic [22X0[122X a prime integer [22Xp[122X. It returns the induced chain map [22XFâŠ—_ ZG Z_p : R âŠ—_ ZG Z_p âŸ¶ S âŠ—_ ZG Z_p[122X.[133X â”‚ 
  
  [33X[0;0YCohomology rings[133X
  
      â”‚ AreIsomorphicGradedAlgebras(A,B):: PresentedGradedAlgebra, PresentedGradedAlgebra --> Boolean [33X[0;6YInputs two freely presented graded algebras [22XA= F[x_1, ..., x_m]/I[122X and [22XB= F[y_1, ..., y_n]/J[122X and returns [12Xtrue[112X if they are isomorphic, and [12Xfalse[112X otherwise. This function was implemented by Paul Smith.â”‚ 
      â”‚ HAPDerivation(R,I,L):: PolynomialRing, List, List --> Derivation [33X[0;6YInputs a polynomial ring [22XR= F[x_1,...,x_m][122X over a field [22XF[122X together with a list [22XI[122X of generators for an ideal in [22XR[122X and a list [22XL=[y_1,...,y_m]âŠ‚ R[122X. It returns the derivation [22Xd: E â†’ E[122X for [22XE=R/I[122X defined by [22Xd(x_i)=y_i[122X. This function was written by Paul Smith. It uses the Singular commutative algebra package.[133X                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   â”‚ 
      â”‚ HilbertPoincareSeries::PresentedGradedAlgebra --> RationalFunction [33X[0;6YInputs a presentation [22XE= F[x_1,...,x_m]/I[122X of a graded algebra and returns its Hilbert-Poincar\'e series. This function was written by Paul Smith and uses the Singular commutative algebra package. It is essentially a wrapper for Singular's Hilbert-Poincare series.â”‚ 
      â”‚ HomologyOfDerivation(d):: Derivation --> List [33X[0;6YInputs a derivation [22Xd: E â†’ E[122X on a quotient [22XE=R/I[122X of a polynomial ring [22XR= F[x_1,...,x_m][122X over a field [22XF[122X. It returns a list [22X[S,J,h][122X where [22XS[122X is a polynomial ring and [22XJ[122X is a list of generators for an ideal in $S$ such that there is an isomorphism [22XÎ±: S/J â†’ ker d/ im~ d[122X. This isomorphism lifts to the ring homomorphism [22Xh: S â†’ ker d[122X. This function was written by Paul Smith. It uses the Singular commutative algebra package.â”‚ 
      â”‚ IntegralCohomologyGenerators(R,n):: FreeResolution, Int --> List [33X[0;6YInputs at least [22Xn+1[122X terms of a free [22XZG[122X-resolution of [22XZ[122X and the integer [22Xn ge 1[122X. It returns a minimal list of cohomology classes in [22XH^n(G, Z)[122X which, together with all cup products of lower degree classes, generate the group [22XH^n(G, Z)[122X . (Let [22Xa_i[122X be the [22Xi[122X-th canonical generator of the [22Xd[122X-generator abelian group [22XH^n(G,Z)[122X. The cohomology class [22Xn_1a_1 + ... +n_da_d[122X is represented by the integer vector [22Xu=(n_1, ..., n_d)[122X. )â”‚ 
      â”‚ LHSSpectralSequence(G,N,r):: Group, Int, Int --> List [33X[0;6YInputs a finite [22X2[122X-group [22XG[122X, and normal subgroup [22XN[122X and an integer [22Xr[122X. It returns a list of length [22Xr[122X whose [22Xi[122X-th term is a presentation for the [22Xi[122X-th page of the Lyndon-Hochschild-Serre spectral sequence. This function was written by Paul Smith. It uses the Singular commutative algebra package.â”‚ 
      â”‚ LHSSpectralSequenceLastSheet(G,N):: Group, Int --> List [33X[0;6YInputs a finite [22X2[122X-group [22XG[122X and normal subgroup [22XN[122X. It returns presentation for the [22XE_âˆž[122X page of the Lyndon-Hochschild-Serre spectral sequence. This function was written by Paul Smith. It uses the Singular commutative algebra package.â”‚ 
      â”‚ ModPCohomologyGenerators(G,n):: Group, Int --> List ModPCohomologyGenerators(R):: FreeResolution --> List [33X[0;6YInputs either a [22Xp[122X-group [22XG[122X and positive integer [22Xn[122X, or else [22Xn+1[122X terms of a minimal [22XFG[122X-resolution [22XR[122X of the field [22XF[122X of [22Xp[122X elements. It returns a pair whose first entry is a minimal list of homogeneous generators for the cohomology ring [22XA=H^âˆ—(G, F)[122X modulo all elements in degree greater than [22Xn[122X. The second entry of the pair is a function [12Xdeg[112X which, when applied to a minimal generator, yields its degree. WARNING: the following rule must be applied when multiplying generators [22Xx_i[122X together. Only products of the form [22Xx_1*(x_2*(x_3*(x_4*...)))[122X with [22Xdeg(x_i) le deg(x_i+1)[122X should be computed (since the [22Xx_i[122X belong to a structure constant algebra with only a partially defined structure constants table).â”‚ 
      â”‚ ModPCohomologyRing(R):: FreeResolution --> SCAlgebra ModPCohomologyRing(R,level):: FreeResolution, String --> SCAlgebra ModPCohomologyRing(G,n):: Group, Int --> SCAlgebra ModPCohomologyRing(G,n,level):: Group, Int, String --> SCAlgebra [33X[0;6YInputs either a [22Xp[122X-group [22XG[122X and positive integer [22Xn[122X, or else [22Xn[122X terms of a minimal [22XFG[122X-resolution [22XR[122X of the field [22XF[122X of [22Xp[122X elements. It returns the cohomology ring [22XA=H^âˆ—(G, F)[122X modulo all elements in degree greater than [22Xn[122X. The ring is returned as a structure constant algebra [22XA[122X. The ring [22XA[122X is graded. It has a component [12XA!.degree(x)[112X which is a function returning the degree of each (homogeneous) element [22Xx[122X in [12XGeneratorsOfAlgebra(A)[112X. An optional input variable [22X"level"[122X can be set to one of the strings [22X"medium"[122X or [22X"high"[122X. These settings determine parameters in the algorithm. The default setting is [22X"medium"[122X. When [22X"level"[122X is set to [22X"high"[122X the ring [22XA[122X is returned with a component [12XA!.niceBasis[112X. This component is a pair [22X[Coeff,Bas][122X. Here [22XBas[122X is a list of integer lists; a "nice" basis for the vector space [22XA[122X can be constructed using the command [12XList(Bas,x->Product(List(x,i->Basis(A)[i]))[112X. The coefficients of the canonical basis element [12XBasis(A)[i][112X are stored as [12XCoeff[i][112X. If the ring [22XA[122X is computed using the setting [22X"level"="medium"[122X then the component [12XA!.niceBasis[112X can be added to [22XA[122X using the command [12XA:=ModPCohomologyRing\_part\_2(A)[112X.[133X â”‚ 
      â”‚ Mod2CohomologyRingPresentation(G):: Group --> PresentedGradedAlgebra Mod2CohomologyRingPresentation(G,n):: Group --> PresentedGradedAlgebra Mod2CohomologyRingPresentation(A):: Group --> PresentedGradedAlgebra Mod2CohomologyRingPresentation(R):: Group --> PresentedGradedAlgebra [33X[0;6YWhen applied to a finite [22X2[122X-group [22XG[122X this function returns a presentation for the mod-[22X2[122X cohomology ring [22XH^âˆ—(G, F)[122X. The Lyndon-Hochschild-Serre spectral sequence is used to prove that the presentation is complete. When the function is applied to a [22X2[122X-group G and positive integer [22Xn[122X the function first constructs [22Xn+1[122X terms of a free [22XFG[122X-resolution [22XR[122X, then constructs the finite-dimensional graded algebra [22XA=H^(âˆ— le n)(G, F)[122X, and finally uses [22XA[122X to approximate a presentation for [22XH^*(G, F)[122X. For "sufficiently large" [22Xn[122X the approximation will be a correct presentation for [22XH^âˆ—(G, F)[122X. Alternatively, the function can be applied directly to either the resolution [22XR[122X or graded algebra [22XA[122X. This function was written by Paul Smith. It uses the Singular commutative algebra package to handle the Lyndon-Hochschild-Serre spectral sequence.[133X                                                                                                                                                                                                                                                                        â”‚ 
  
  [33X[0;0YGroup Invariants[133X
  
      â”‚ GroupCohomology(G,k):: Group, Int --> List GroupCohomology(G,k,p):: Group, Int, Int --> List [33X[0;6YInputs a group [22XG[122X and integer [22Xk ge 0[122X. The group [22XG[122X should either be finite or else lie in one of a range of classes of infinite groups (such as nilpotent, crystallographic, Artin etc.). The function returns the list of abelian invariants of [22XH^k(G, Z)[122X.[133X [33X[0;6YIf a prime [22Xp[122X is given as an optional third input variable then the function returns the list of abelian invariants of [22XH^k(G, Z_p)[122X. In this case each abelian invariant will be equal to [22Xp[122X and the length of the list will be the dimension of the vector space [22XH^k(G, Z_p)[122X.[133X                                                                                                                                                                                                                                                                                                                              â”‚ 
      â”‚ GroupHomology(G,k):: Group, Int --> List GroupHomology(G,k,p):: Group, Int, Int --> List [33X[0;6YInputs a group [22XG[122X and integer [22Xk ge 0[122X. The group [22XG[122X should either be finite or else lie in one of a range of classes of infinite groups (such as nilpotent, crystallographic, Artin etc.). The function returns the list of abelian invariants of [22XH_k(G, Z)[122X.[133X [33X[0;6YIf a prime [22Xp[122X is given as an optional third input variable then the function returns the list of abelian invariants of [22XH_k(G, Z_p)[122X. In this case each abelian invariant will be equal to [22Xp[122X and the length of the list will be the dimension of the vector space [22XH_k(G, Z_p)[122X.[133X                                                                                                                                                                                                                                                                                                                                  â”‚ 
      â”‚ PrimePartDerivedFunctor(G,R,A,k):: Group, FreeResolution, Function, Int --> List [33X[0;6YInputs a group [22XG[122X, an integer [22Xk ge 0[122X, at least [22Xk+1[122X terms of a free [22XZP[122X-resolution of [22XZ[122X for [22XP[122X a Sylow [22Xp[122X-subgroup of [22XG[122X. A function such as [12XA=TensorWithIntegers[112X is also entered. The abelian invariants of the [22Xp[122X-primary part [22XH_k(G,A)_(p)[122X of the homology with coefficients in [22XA[122X is returned.â”‚ 
      â”‚ PoincareSeries(G,n):: Group, Int --> RationalFunction PoincareSeries(G):: Group --> RationalFunction PoincareSeries(R,n):: Group, Int --> RationalFunction PoincareSeries(L,n):: Group, Int --> RationalFunction [33X[0;6YInputs a finite [22Xp[122X-group [22XG[122X and a positive integer [22Xn[122X. It returns a quotient of polynomials [22Xf(x)=P(x)/Q(x)[122X whose expansion has coefficient of [22Xx^k[122X equal to the rank of the vector space [22XH_k(G, F_p)[122X for all [22Xk[122X in the range [22X1 le k le n[122X. (The second input variable can be omitted, in which case the function tries to choose a `reasonable' value for [22Xn[122X. For 2-groups the function [12XPoincareSeriesLHS(G)[112X can be used to produce an [22Xf(x)[122X that is correct in all degrees.) In place of the group [22XG[122X the function can also input (at least [22Xn[122X terms of) a minimal mod-[22Xp[122X resolution [22XR[122X for [22XG[122X. Alternatively, the first input variable can be a list [22XL[122X of integers. In this case the coefficient of [22Xx^k[122X in [22Xf(x)[122X is equal to the [22X(k+1)[122Xst term in the list.[133X â”‚ 
      â”‚ PoincareSeries(G,n):: Group, Int --> RationalFunction PoincareSeries(G):: Group --> RationalFunction PoincareSeries(R,n):: Group, Int --> RationalFunction PoincareSeries(L,n):: Group, Int --> RationalFunction [33X[0;6YInputs a finite [22Xp[122X-group [22XG[122X and a positive integer [22Xn[122X. It returns a quotient of polynomials [22Xf(x)=P(x)/Q(x)[122X whose expansion has coefficient of [22Xx^k[122X equal to the rank of the vector space [22XH_k(G, F_p)[122X for all [22Xk[122X in the range [22X1 le k le n[122X. (The second input variable can be omitted, in which case the function tries to choose a `reasonable' value for [22Xn[122X. For 2-groups the function [12XPoincareSeriesLHS(G)[112X can be used to produce an [22Xf(x)[122X that is correct in all degrees.) In place of the group [22XG[122X the function can also input (at least [22Xn[122X terms of) a minimal mod-[22Xp[122X resolution [22XR[122X for [22XG[122X. Alternatively, the first input variable can be a list [22XL[122X of integers. In this case the coefficient of [22Xx^k[122X in [22Xf(x)[122X is equal to the [22X(k+1)[122Xst term in the list.[133X â”‚ 
      â”‚ RankHomologyPGroup(G,P,n):: Group, RationalFunction, Int --> Int [33X[0;6YInputs a [22Xp[122X-group [22XG[122X, a rational function [22XP[122X representing the Poincar\'e series of the mod-[22Xp[122X cohomology of [22XG[122X and a positive integer [22Xn[122X. It returns the minimum number of generators for the finite abelian [22Xp[122X-group [22XH_nG, Z)[122X.â”‚ 
  
  [33X[0;0Y[22XF_p[122X-modules[133X
  
      â”‚ GroupAlgebraAsFpGModule:: Group --> FpGModule [33X[0;6YInputs a finite [22Xp[122X-group [22XG[122X and returns the modular group algebra [22XF_pG[122X in the form of an [22XF_pG[122X-module.[133X                                                                                                                                                  â”‚ 
      â”‚ Radical:: FpGModule --> FpGModule [33X[0;6YInputs an [22XF_pG[122X-module and returns its radical.[133X                                                                                                                                                                                                                   â”‚ 
      â”‚ RadicalSeries(M):: FpGModule --> List RadicalSeries(R):: Resolution --> FilteredSparseChainComplex [33X[0;6YInputs an [22XF_pG[122X-module [22XM[122X and returns its radical series as a list of [22XF_pG[122X-modules.[133X [33X[0;6YInputs a free [22XF_pG[122X-resolution R and returns the filtered chain complex [22Xâ‹¯ Rad_2( F_pG)R le Rad_1( F_pG)R le R[122X.[133X â”‚ 
  
