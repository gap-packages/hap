  
  [1X23 Cubical Complexes[0X
  
  ::::::::::::::::::::::::
  [10XArrayToPureCubicalComplexA,n)[0m
  
  Inputs  an  integer  array  A  of dimension d and an integer n. It returns a
  d-dimensional  pure cubical complex corresponding to the black/white "image"
  determined  by the threshold n and the values of the entries in A. (Integers
  below  the  threshold  correspond  to  a  black  pixel,  and higher integers
  correspond to a white pixel.)
  ::::::::::::::::::::::::
  [10XPureCubicalComplexA,n)[0m
  
  Inputs  a  binary  array  A  of  dimension  d.  It returns the corresponding
  d-dimensional pure cubical complex.
  ::::::::::::::::::::::::
  [10XPureCubicalComplexIntersection(S,T)[0m
  
  Inputs  two  pure cubical complexes with common dimension and array size. It
  returns the intersection of the two complexes. (An entry in the binary array
  of  the intersection has value 1 if and only if the corresponding entries in
  the binary arrays of S and T both have value 1.)
  ::::::::::::::::::::::::
  [10XPureCubicalComplexUnion(S,T)[0m
  
  Inputs  two  pure cubical complexes with common dimension and array size. It
  returns the union of the two complexes. (An entry in the binary array of the
  union  has  value 1 if and only if at least one of the corresponding entries
  in the binary arrays of S and T has value 1.)
  ::::::::::::::::::::::::
  [10XPureCubicalComplexDifference(S,T)[0m
  
  Inputs  two  pure cubical complexes with common dimension and array size. It
  returns  the difference S-T. (An entry in the binary array of the difference
  has  value 1 if and only if the corresponding entry in the binary array of S
  is 1 and the corresponding entry in the binary array of T is 0.)
  ::::::::::::::::::::::::
  [10X ReadImageAsPureCubicalComplex("file.png",n)[0m
  
  Reads  an image file ("file.png", "file.eps", "file.bmp" etc) and an integer
  n  between  0 and 765. It returns a 2-dimensional pure cubical complex based
  on the black/white version of the image determined by the threshold n.
  ::::::::::::::::::::::::
  [10XReadImageSequenceAsPureCubicalComplex("directory",n)[0m
  
  Reads  the name of a directory containing a sequence of image files (ordered
  alphanumerically),  and  an  integer  n  between  0  and  765.  It returns a
  3-dimensional  pure  cubical complex based on the black/white version of the
  images determined by the threshold n.
  [10XSize(T)[0m
  
  This  returns  the  number  of  non-zero  entries in the binary array of the
  cubical complex, or pure cubical complex T.
  [10XDimension(T)[0m
  
  This  returns  the dimension of the cubical complex, or pure cubical complex
  T.
  ::::::::::::::::::::::::
  [10XWritePureCubicalComplexAsImage(T,"filename","ext")[0m
  
  Inputs  a  2-dimensional  pure cubical complex T, and a filename followed by
  its  extension  (e.g.  "myfile"  followed  by "png"). A black/white image is
  saved to the file.
  ::::::::::::::::::::::::
  [10XViewPureCubicalComplex(T)[0m
  [10XViewPureCubicalComplex(T,"mozilla")[0m
  
  Inputs a 2-dimensional pure cubical complex T, and optionally a command such
  as "mozilla" for viewing image files. A black/white image is displayed.
  ::::::::::::::::::::::::
  [10XHomology(T,n)[0m
  [10XHomology(T)[0m
  
  Inputs  a  pure cubical complex, or cubical complex, or simplicial complex T
  and  a non-negative integer n. It returns the n-th integral homology of T as
  a  list  of torsion integers. If no value of n is input then the list of all
  homologies of T in dimensions 0 to Dimension(T) is returned .
  ::::::::::::::::::::::::
  [10XBettinumbers(T,n)[0m
  [10XBettinumbers(T)[0m
  
  Inputs  a  pure  cubical  complex, or cubical complex, simplicial complex or
  chain  complex T and a non-negative integer n. The rank of the n-th rational
  homology  group  H_n(T,  Q) is returned. If no value for n is input then the
  list of Betti numbers in dimensions 0 to Dimension(T) is returned .
  ::::::::::::::::::::::::
  [10XDirectProductOfPureCubicalComplexes(M,N)[0m
  
  Inputs  two pure cubical complexes M,N and returns their direct product D as
  a pure cubical complex. The dimension of D is the sum of the dimensions of M
  and N.
  ::::::::::::::::::::::::
  [10XSuspensionOfPureCubicalComplex(M)[0m
  
  Inputs  a pure cubical complex M and returns a pure cubical complex with the
  homotopy type of the suspension of M.
  [10XEulerCharacteristic(T)[0m
  
  Inputs  a  pure cubical complex, or cubical complex, or simplicial complex T
  and returns its Euler characteristic.
  ::::::::::::::::::::::::
  [10XPathComponentOfPureCubicalComplex(T,n)[0m
  
  Inputs  a  pure  cubical  complex  T  and  an  integer n in the rane 1, ...,
  Bettinumbers(T)[1]  .  It  returns  the  n-th  path component of T as a pure
  cubical  complex. The value n=0 is also allowed, in which case the number of
  path components is returned.
  [10XChainComplex(T)[0m
  
  Inputs  a  pure cubical complex, or cubical complex, or simplicial complex T
  and returns the (often very large) cellular chain complex of T.
  [10XChainComplexOfPair(T,S)[0m
  
  Inputs  a  pure  cubical  complex  or cubical complex T and subcomplex S. It
  returns the quotient C(T)/C(S) of cellular chain complexes.
  [10XExcisedPureCubicalPair(T,S)[0m
  
  Inputs  a  pure  cubical complex T and subcomplex S. It returns the pair [T\
  intS,  S\  intS])  of  pure cubical complexes where intS is the pure cubical
  complex obtained from S by removing its boundary.
  ::::::::::::::::::::::::
  [10XChainInclusionOfPureCubicalPair(S,T)[0m
  
  Inputs  a  pure  cubical  complex  T  and subcomplex S. It returns the chain
  inclusion C(S) -> C(T) of cellular chain complexes.
  ::::::::::::::::::::::::
  [10XChainMapOfPureCubicalPairs(M,S,N,T)[0m
  
  Inputs a pure cubical complex N and subcomplexes M, T and S in T. It returns
  the chain map C(M/S) -> C(N/T) of quotient cellular chain complexes.
  ::::::::::::::::::::::::
  [10XContractPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical  complex T of dimension d and removes d-dimensional
  cells  from T without changing the homotopy type of T. When the function has
  been  applied, no further d-cells can be removed from T without changing its
  homotopy type. This function modifies T.
  ::::::::::::::::::::::::
  [10XContractedComplex(T)[0m
  
  Inputs a pure cubical complex T and returns a structural copy of the complex
  obtained from T by applying the function ContractPureCubicalComplex(T).
  ::::::::::::::::::::::::
  [10XZigZagContractedPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical  complex  T  and returns a homotopy equivalent pure
  cubical  complex  S.  The  aim  is  for  S to involve fewer cells than T and
  certainly to involve no more cells than T.
  ::::::::::::::::::::::::
  [10XContractCubicalComplex(T)[0m
  
  Inputs  a  cubical complex T and removes cells without changing the homotopy
  type of T. It changes T. In particular, it adds the components T.vectors and
  T.rewrite of a discrete vector field.
  
  At  present this function only works for cubical complexes of dimension 2 or
  3.
  ::::::::::::::::::::::::
  [10XDVFReducedCubicalComplex(T)[0m
  
  Inputs  a  cubical  complex T and returns a non-regular cubical complex R by
  constructing  a  discrete  vector  field.  The  vector  field is designed to
  minimize  the  number  of  critical  cells in R at the cost of allowing cell
  attaching maps that are not homeomorphisms on boundaries.
  
  At  present  this  function  works  only  for  2-  and 3-dimensional cubical
  complexes.
  
  The  function  ChainComplex(R)  can  be  used  to  obtain the cellular chain
  complex of R.
  ::::::::::::::::::::::::
  [10XSkeletonOfCubicalComplex(T,n)[0m
  
  Inputs  a cubical complex, or pure cubical complex T and positive integer n.
  It returns the n-skeleton of T as a cubical complex.
  ::::::::::::::::::::::::
  [10XContractibleSubomplexOfPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical  complex  T and returns a maximal contractible pure
  cubical subcomplex.
  ::::::::::::::::::::::::
  [10XAcyclicSubomplexOfPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical complex T and returns a (not necessarily connected)
  pure  cubical subcomplex having trivial homology in all degrees greater than
  0.
  ::::::::::::::::::::::::
  [10XHomotopyEquivalentMaximalPureCubicalSubcomplex(T,S)[0m
  
  Inputs  a  pure cubical complex T together with a pure cubical subcomplex S.
  It  returns a pure cubical subcomplex H of T which contains S and is maximal
  with respect to the property that it is homotopy equivalent to S.
  ::::::::::::::::::::::::
  [10XHomotopyEquivalentMinimalPureCubicalSubcomplex(T,S)[0m
  
  Inputs  a  pure cubical complex T together with a pure cubical subcomplex S.
  It  returns a pure cubical subcomplex H of T which contains S and is minimal
  with respect to the property that it is homotopy equivalent to T.
  ::::::::::::::::::::::::
  [10XBoundaryOfPureCubicalComplex(T)[0m
  
  Inputs  a  pure cubical complex T and returns its boundary as a pure cubical
  complex.  The  boundary  consists of all cubes which have one or more facets
  that lie in just the one cube.
  ::::::::::::::::::::::::
  [10XSingularitiesOfPureCubicalComplex(T,radius,tolerance)[0m
  
  Inputs  a  pure  cubical complex T together with a positive integer "radius"
  and  an integer "tolerance" in the range 1..100. It returns the pure cubical
  subcomplex  of  those  cells  in  the  boundary  where  the  boundary is not
  differentiable.  (The  method  for  deciding differentiability at a point is
  crude/discrete, prone to errors and depends on the radius and tolerance.)
  ::::::::::::::::::::::::
  [10XThickenedPureCubicalComplex(T)[0m
  
  Inputs  a  pure cubical complex T and returns a pure cubical complex S. If a
  euclidean  cube  is  in  T then this cube and all its neighbouring cubes are
  included in S.
  ::::::::::::::::::::::::
  [10XCropPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical  complex  T  and  returns  a pure cubical complex S
  obtained  from T by removing any "zero boundary sheets" of the binary array.
  Thus  S  and T are isometric as euclidean spaces but there may be fewer zero
  entries in the binary array for S.
  ::::::::::::::::::::::::
  [10XBoundingPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical  complex  T and returns a contractible pure cubical
  complex S containing T.
  ::::::::::::::::::::::::
  [10XMorseFiltration(M,i,t,bool)[0m
  [10XMorseFiltration(M,i,t)[0m
  
  Inputs  a  pure cubical complex M of dimension d, an integer i between 1 and
  d,  a  positive  integer  t  and a boolean value True or False. The function
  returns  a  list  [M_1,  M_2, ..., M_t] of pure cubical complexes with M_k a
  subcomplex  of  M_k+1.  The  list  is constructed by setting all slices of M
  perpendicular  to the i-th axis equal to zero if they meet the ith axis at a
  sufficiently  high  coordinate (if bool=True) or sufficiently low coordinate
  (if bool=False).
  
  If  the  variable bool is not specified then it is assumed to have the value
  True.
  ::::::::::::::::::::::::
  [10XComplementOfPureCubicalComplex(T)[0m
  
  Inputs  a  pure  cubical  complex  T and returns a pure cubical complex S. A
  euclidean cube is in S precisely when the cube is not in T.
  ::::::::::::::::::::::::
  [10XPureCubicalComplexToTextFile(file,M)[0m
  
  Inputs  a  pure  cubical  complex M and a string containing the address of a
  file.  A  representation  of this complex is written to the file in a format
  that can be read by the CAPD (Computer Assisted Proofs in Dynamics) software
  developed by Marian Mrozek and others.
  
