<Chapter><Heading> G-Outer Groups</Heading>

<Section><Heading> &nbsp;</Heading>

<ManSection>

<Func Name="GOuterGroup" Arg="E,N"/>

<Func Name="GOuterGroup" Arg=""/>
<Description>
<P/>

Inputs a group <M>E</M> and normal subgroup <M>N</M>. It returns <M>N</M>
as a <M>G</M>-outer group where <M>G=E/N</M>.

<P/>
The function can be used without an argument. In this case an empty outer group <M>C</M> is returned. The components must be set using SetActingGroup(C,G),
SetActedGroup(C,N) and SetOuterAction(C,alpha).
 
<P/><B>Examples:</B> <URL><Link>../www/SideLinks/About/aboutCoefficientSequence.html</Link><LinkText>1</LinkText></URL>&nbsp;,
<URL><Link>../www/SideLinks/About/aboutGouter.html</Link><LinkText>2</LinkText></URL>&nbsp; 

</Description>





















































































</ManSection>

<ManSection>

<Var Name="GOuterGroupHomomorphismNC"/>

<Var Name="GOuterGroupHomomorphismNC"/>
<Description>
<P/>

Inputs  G-outer groups <M>A</M> and <M>B</M> with common acting
 group, and a group homomorphism phi:ActedGroup(A) --> ActedGroup(B). 
It returns the corresponding G-outer homomorphism PHI:A--> B.
 No check is made to verify that phi is actually a group homomorphism which preserves the G-action.

<P/>
The function can be used without an argument. In this case an empty outer group homomorphism <M>PHI</M> is returned. The components must then be set.

<P/><B>Examples:</B> 
</Description>





















































































</ManSection>

<ManSection>

<Func Name="GOuterHomomorphismTester" Arg="A,B,phi"/>
<Description>
<P/>

Inputs  G-outer groups <M>A</M> and <M>B</M> with common acting  group, and a group homomorphism phi:ActedGroup(A) --> ActedGroup(B). 
 It tests whether  phi is  a group homomorphism which preserves the G-action.

<P/>
The function can be used without an argument. In this case an empty outer group homomorphism <M>PHI</M> is returned. The components must then be set. 
<P/><B>Examples:</B> 
</Description>





















































































</ManSection>

<ManSection>

<Func Name="Centre" Arg="A"/>
<Description>
<P/>

Inputs  G-outer group <M>A</M> and 
 returns the group theoretic centre of ActedGroup(A) as a
 G-outer group.

<P/><B>Examples:</B> <URL><Link>../www/SideLinks/About/aboutParallel.html</Link><LinkText>1</LinkText></URL>&nbsp;,
<URL><Link>../www/SideLinks/About/aboutSchurMultiplier.html</Link><LinkText>2</LinkText></URL>&nbsp;,
<URL><Link>../www/SideLinks/About/aboutGouter.html</Link><LinkText>3</LinkText></URL>&nbsp;,
<URL><Link>../www/SideLinks/About/aboutLieCovers.html</Link><LinkText>4</LinkText></URL>&nbsp; 

</Description>





















































































</ManSection>

<ManSection>

<Func Name="DirectProductGog" Arg="A,B"/>

<Func Name="DirectProductGog" Arg="Lst"/>
<Description>
<P/>

Inputs  G-outer groups <M>A</M> and <M>B</M> with common acting group,
and returns their group-theoretic direct product as a G-outer group. 
The outer action
on the direct product is the diagonal one.

<P/>
The function also applies to a list Lst of G-outer groups  with common acting group.

<P/>
For a direct product D constructed using this function, the embeddings and projections can be obtained (as G-outer group homomorphisms) using the functions
 Embedding(D,i) and Projection(D,i).
<P/><B>Examples:</B> 
</Description>





















































































</ManSection>

</Section>
</Chapter>

